= OptSimple provides a very simple interface to command line parsing. 

== Description
Parameter specification, validity checking and argument transformations
can be put in one place, default parameters are easily set, and an automatic
usage statement is constructed.

There are three methods to define command line parameters:

 flag - a command line switch with no arguments following 
 
 option - an optional command line parameter with one or more arguments
 
 argument - a mandatory command line parameter with one or more arguments

Inside the blocks in flag, option, and argument a shortcut function called 'set_opt'
can be used to set an option that will be returned in the Result. The 'accumulate_opt'
method can be used in the option and argument blocks to create a list of values, and in 
the flag block to increment a counter (with verbosity being the classic example). 

The number of arguments are determined by the 'arity' of the block. 

The order in which the parameters are defined dictate their order on the command line.

User defined help banners, summaries or the whole usage statement can be defined. 

== Documentation

See OptSimple for the API specification

== Installation

It is recommended to install OptSimple using RubyGems:

 $ sudo gem install opt-simple

== Examples

=== One example that shows a lot of the behavior you might use
require 'opt_simple'

 min = 5
 max = 15
 
 options = OptSimple.new.parse_opts! do 
   argument %w[-i --infile], "Infile, multiple allowed", "FILE" do | arg |
     accumulate_opt arg
   end
 
   option %w[-p --pattern --glob-pattern], "glob pattern","PATTERN"
 
   option %w[-n -num --num-values],"Number of val","VAL" do |arg|
     set_opt arg.to_i
   end
 
   option "--range", "range: min,max (both >0) default is #{min},#{max}" do | arg1,arg2 |
     min = arg1.to_i
     max = arg2.to_i    
      
     error "max must be greater than min" unless max > min
     error "both must be >=0" if min < 0
   end
 
   flag %w[-v  --verbose],"Verbosity. the more you set, the more we give" do 
     accumulate_opt
   end
 
 end
 
 puts "Options"
 puts options
 # access the results using method names or hash syntax 
 puts options.pattern
 puts options[:p]
 puts options['glob-pattern']
 
Which prints out an automatic usage statement:
 Usage: opt_ex.rb [options]
                                                                                                                                                             
   MANDATORY ARGS:
     -i, --infile FILE                           Infile, multiple allowed                                                                                     

   OPTIONS:
     -p, --pattern, --glob-pattern PATTERN       glob pattern

     -n, -num, --num-values VAL                  Number of val

         --range ARG                             range: min,max (both >0) default is 5,15

     -v, --verbose                               Verbosity. the more you set, the more we give

     -h, --help                                  (for this help message)


=== A very simple example with no error checking. Use at your own risk!

 require 'opt_simple'
 
 defaults = {
 'max' => 40
 } 
 
 options = OptSimple.new(defaults).parse_opts! 
 
 puts "Options"
 puts options
 
=== An example that provides error checking on ARGV, using all default behavior and how to specify a 'metavar'
 
 require 'opt_simple'
 
 options = OptSimple.new.parse_opts! do 
   argument "-i","inFile","FILE"
   option %w[-p --pattern --glob-pattern], "glob pattern","PATTERN"
   flag "-v","Verbose"
   flag "-whatever"
 end
 
 puts "Options"
 puts options

=== An example that shows how to use 'set_opt', set the banner string, and add a summary.

 require 'opt_simple'
 
 defaults = {
   "max" => 10
 }
 
 options = OptSimple.new(defaults).parse_opts! do 
   banner "USAGE: #{$0}"
   summary "Show how to set a banner and summary."
 
   argument "-i","inFile" 
   option %w[-m -max --maximum-value],"Maximum val" do |arg|
     set_opt arg.to_i
   end
 end
 
 puts "Options"
 puts options

=== An example that shows how to use 'accumulate_opt' on an option to create a list, and on a flag to increment a counter

 require 'opt_simple'
 
 verbosity = 0
 
 options = OptSimple.new.parse_opts! do 
   option %w[-i --infile], "Infile, multiple allowed", "FILE" do | arg |
     accumulate_opt arg
   end
 
   flag %w[-v  --verbose],"Verbosity. the more you set, the more we give" do 
     verbosity += 1
   end
 
   flag %w[-m --more-cow-bell], "I've got a fever" do 
     accumulate_opt
   end
 end
 
 puts "Options"
 puts options
 
=== An example that shows that you can easily set your defaults in normal Ruby variables and provide your own help.
 
 require 'opt_simple'
  
 in_file = nil
 min = 0
 max = 10
 pattern = "*"
 
 usage_string = <<-UL
 Usage: $0 [options]
 
   -i, --infile FILE
  [--range (min - default #{min}, max - default #{max})]
  [-p, --pattern, --glob-pattern (default #{pattern})]
  [-v (verbose)]
  [-h, --help (help)]
 
 UL
 
 OptSimple.new.parse_opts! do 
   help usage_string
 
   argument %w[-i --infile],"inFile" do |arg|
     in_file = arg
     error "inFile must exist and be readable" unless(File.readable?(in_file))
   end
   
   option ["--range"], "range: min,max (both >0) default is #{min},#{max}" do | arg1,arg2 |
     min = arg1.to_i
     max = arg2.to_i    
     
     error "max must be greater than min" unless max > min
     error "both must be >=0" if min < 0
   end  
 
   option %w[-p --pattern --glob-pattern], "glob pattern, default is #{pattern}" do |arg|
     pattern = arg
   end
 
   flag "-v","Verbose"
 end
 
 puts "in_file #{in_file}"
 puts "min #{min}"
 puts "max #{max}"
 puts "pattern #{pattern}"
 
 puts "ARGV"
 puts ARGV
  
=== An example showing how to register parms in multiple places before parsing the command line

 require 'opt_simple'
 
 min = 5
 max = 15
 
 os = OptSimple.new
 
 os.register_opts do 
   argument %w[-i --infile], "Infile, multiple allowed", "FILE" do | arg |
     accumulate_opt arg
   end
 
   option %w[-p --pattern --glob-pattern], "glob pattern","PATTERN"
 end
 
 os.register_opts do 
   option %w[-n -num --num-values],"Number of val","VAL" do |arg|
     set_opt arg.to_i
   end
 
   option "--range", "range: min,max (both >0) default is #{min},#{max}" do | arg1,arg2 |
     min = arg1.to_i
     max = arg2.to_i    
      
     error "max must be greater than min" unless max > min
     error "both must be >=0" if min < 0
   end
 
   flag %w[-v  --verbose],"Verbosity. the more you set, the more we give" do 
     accumulate_opt
   end
 end
 
 options = os.parse_opts!
 
 puts "Options"
 puts options
 
== Questions and/or Comments
 
email {Ethan Stryker}[mailto:e.stryker@gmail.com]
 
 